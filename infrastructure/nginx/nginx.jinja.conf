user nginx;
worker_processes  auto;

events {
  worker_connections  4096;  ## Default: 1024
}

http {
    log_format main '$remote_addr - $remote_user [$time_local] "$request" '
                      '$status $body_bytes_sent "$request_body"';
    access_log /var/log/nginx/access.log main;

    include /etc/nginx/mime.types;
    
    upstream main_upstream {
        keepalive 128;
        server main:8081;
    }

    {% if analytics_enabled %}
    upstream analytics_upstream {
        keepalive 128;
        server analytics:8081;
    }
    {% endif %}

    {% for domain in domains %}
    server {
        server_name {{ domain }};

        location /api/v2 {
            #
            # CORS config
            #
            if ($request_method = 'OPTIONS') {
                add_header 'Access-Control-Allow-Origin' '*';
                add_header 'Access-Control-Allow-Methods' 'GET, POST, OPTIONS';
                add_header 'Access-Control-Allow-Headers' 'User-Agent,Keep-Alive,Content-Type';
                add_header 'Access-Control-Max-Age' 1728000; # Tell client that this pre-flight info is valid for 20 days
                add_header 'Content-Type' 'text/plain; charset=utf-8';
                add_header 'Content-Length' 0;
                return 204;
             }
            if ($request_method = 'POST') {
                add_header 'Access-Control-Allow-Origin' '*' always;
                add_header 'Access-Control-Allow-Methods' 'GET, POST, OPTIONS' always;
                add_header 'Access-Control-Allow-Headers' 'User-Agent,Keep-Alive,Content-Type' always;
                add_header 'Access-Control-Expose-Headers' 'Content-Length,Content-Range' always;
            }
            if ($request_method = 'GET') {
                add_header 'Access-Control-Allow-Origin' '*' always;
                add_header 'Access-Control-Allow-Methods' 'GET, POST, OPTIONS' always;
                add_header 'Access-Control-Allow-Headers' 'User-Agent,Keep-Alive,Content-Type' always;
                add_header 'Access-Control-Expose-Headers' 'Content-Length,Content-Range' always;
            }
            #
            # Reverse proxy to main_upstream
            #
            rewrite /api/v2/(.*) /$1 break;
            proxy_pass_header Authorization;
            proxy_pass http://main_upstream ;
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_http_version 1.1;
            proxy_set_header Connection "";
            proxy_buffering off;
            client_max_body_size 0;
            proxy_read_timeout 36000s;
            proxy_redirect off;
        }

        {% if analytics_enabled %}
        location /analytics/api/v0 {
            if ($request_method = 'GET') {
                add_header 'Access-Control-Allow-Origin' '*' always;
                add_header 'Access-Control-Allow-Methods' 'GET, POST, OPTIONS' always;
                add_header 'Access-Control-Allow-Headers' 'User-Agent,Keep-Alive,Content-Type' always;
                add_header 'Access-Control-Expose-Headers' 'Content-Length,Content-Range' always;
            }
            #
            # Reverse proxy to main_upstream
            #
            rewrite /analytics/api/v0/(.*) /$1 break;
            proxy_pass_header Authorization;
            proxy_pass http://analytics_upstream ;
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_http_version 1.1;
            proxy_set_header Connection "";
            proxy_buffering off;
            client_max_body_size 0;
            proxy_read_timeout 36000s;
            proxy_redirect off;
        }

        location /analytics {
            rewrite /analytics/(.*) http://$host/analytics/api/v0/$1 break;
        }
        {% endif %}

        {% if index_folder|length %}
        root /usr/share/nginx/html;
        index index.html;

        location / {
            try_files $uri $uri/ /index.html;
        }
        {% else %}
        location / {
            rewrite /(.*) http://$host/api/v2/$1 break;
        }
        {% endif %}
    }
    {% endfor %}
}
