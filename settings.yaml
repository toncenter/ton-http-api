# This file is used to configure TON-HTTP-API service.

# Nginx section
nginx: 
  # List of domains which the service will be hosted on. Based on 
  # this list `nginx.conf` will be generated. Each domain will be 
  # added as `server` section with specified `server_name`.
  domains: 
      # Domain name. For local usage use localhost
    - host: localhost 
      # Enables `/analytics/` route for this domain.
      analytics_enabled: false 
      # Enable index page for this domain.
      index_page_enabled: false
  # Index page folder. All contents will be copied to the nginx html folder.
  index_folder: index_page/prod

# pyTON settings
pyton:
  # Request timeout in seconds. If no response from lite server
  # received within this period error 504 will be returned.
  request_timeout: 20
  # Number of webserver processes. If your server is under high load
  # try increase this value to increase RPS. We recommend to set it 
  # to number of cpu cores.
  webserver_workers: 1
  # Maximum number of parallel requests per liteserver. 
  # NOTE: this parameter is applied individually for every webserver worker,
  # so if you have `parallel_requests_per_liteserver` = 50 and
  # `webserver_workers` = 2, total max parallel requests per liteserver
  # equals 100.
  parallel_requests_per_liteserver: 50
  # Enables `runGetMethod` endpoint
  get_methods: true
  # Enables `jsonRPC` endpoint
  json_rpc: true
  # Path to config file with lite servers info.
  # If you want to point toncenter to your own lite server
  # replace `liteservers` section in config with the only entry
  # with your lite server details.
  liteserver_config: config/mainnet.json
  # Lite client keystore directory
  keystore: ./ton_keystore/
  # Path custom `libtonlibjson.cdll`. If null, default one is used.
  cdll: null

# Logs component settings.
# Each request to the API and each liteserver request can be saved to database
# for further analytics.
# NOTE: if you enable this component, you have to put
# MongoDB password in `./private/mongodb_password`
logs:
  # Enables logs and analytics services.
  enabled: false
  # Whether successful requests or only errors should be logged.
  log_successful_requests: false
  # MongoDB details
  mongodb:
    host: mongodb
    port: 27017
    database: pyton
    username: user1
    password_file: /run/secrets/mongodb_password

# Cache settings.
# Lite server responses can be cached in redis for faster response
# on duplicated requests and preventing lite servers flooding.
cache:
  # Enables cache service.
  enabled: false
  # Redis details
  redis:
    endpoint: cache_redis
    port: 6379
    timeout: 1

# Rate limitting settings.
# It enables api keys to your API and limiting maximum request rate.
# API keys are issued by Telegram bot and stored in redis.
# NOTE: if you enable this component, you have to put your
# Telegram bot token in `./private/token_file`
ratelimit:
  # Enables rate limit services.
  enabled: false
  # Rate limit redis details
  redis:
    endpoint: ratelimit_redis
    port: 6379
    timeout: 1
  # Telegram bot details
  token_bot:
    token_file: /run/secrets/token_file
  # API keys redis details
  token_redis:
    endpoint: token_redis
    port: 6379